=================================
========== IN PROGRESS ==========
=================================

1. run unit tests during developing:
    - export test env vars
    - run container with db without volume
    - tun unit tests

2. run api integ tests during developing:
    - export test env vars
    - run container with db without volumes
    - run app
    - run integ tests

3. run full tests:
    - run unit tests
    - run integ tests

implement sign-on endpoint
  - take data
  - create user in db
  - generate fake tokens
  - return

create tests
  - unit
  - integ

run tests in dev env
run tests in test env

check dev volume

as developer I want to have:
- an environment for developing where I can run the app locally with db in container
  - I need a volume for dev db so store dev data
  - I need to run a db without a volume where I could seed test data
- run tests locally in isolated db
- build a container with app to test
- I need an ability to build a separated test env to run isolated test

https://www.youtube.com/watch?v=oPQgFxHcjAw

=================================
============ BACKLOG ============
=================================
1. Create a Docker container for development

2. Run "Hello World" from container

3. Run simple flask app from container
https://testdriven.io/blog/dockerizing-flask-with-postgres-gunicorn-and-nginx/

4. Create login service
  endpoints:
  sign-on POST
    request: {"emal": "str", "password": "str"}
    response: {"access_token": "str", "refresh_token": "str"}
  login POST
    request: {"emal": "str", "password": "str"}
    response: {"access_token": "str", "refresh_token": "str"}
  logout GET
    204
  refresh GET
    response: {"access_token": "str", "refresh_token": "str"}

5. add open API for endpoints
  https://luolingchun.github.io/flask-openapi3/v3.x/
