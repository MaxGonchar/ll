name: ll_manager_tests
on: [push]

jobs:
  typechecking:
    runs-on: macos-14
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        working-directory: ./services/ll_manager
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev_requirements.txt
      - name: Typecheck with mypy
        working-directory: ./services/ll_manager
        run: |
          mypy src

  linter:
    runs-on: macos-14
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        working-directory: ./services/ll_manager
        run: |
          python -m pip install --upgrade pip
          pip install -r dev_requirements.txt
      - name: Lint with ruff
        working-directory: ./services/ll_manager
        run: |
          ruff check

  unit_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        working-directory: ./services/ll_manager
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev_requirements.txt
      - name: Set up test env
        shell: bash
        working-directory: ./services/ll_manager
        run: |
          ./scripts/app.sh setup_unit_test_env
      - name: Run unit tests
        working-directory: ./services/ll_manager
        run: |
          export $(cat ../../envs/.env.test | xargs)
          pytest tests/unit -v
          coverage report
      - name: Tear down test env
        if: always()
        shell: bash
        working-directory: ./services/ll_manager
        run: |
          ./scripts/app.sh teardown_test_env
